"""
prompt_builder.py
"""

from LLM_gemini import LLM_gemini


def build_free_prompt(histories: str,
                      question: str,
                      results_ds: str,
                      results_hs: str) -> str:
    """
    Build a concise prompt for 'free' plan: short answer, limited length.
    """
    return f"""
            G√ìI FREE: Tr·∫£ l·ªùi ng·∫Øn g·ªçn, kh√¥ng qu√° nhi·ªÅu th√¥ng tin, gi·ªõi h·∫°n ƒë·ªô d√†i.

            B·∫°n l√† lu·∫≠t s∆∞ chuy√™n v·ªÅ B·ªô lu·∫≠t D√¢n s·ª± v√† B·ªô lu·∫≠t H√¨nh s·ª± Vi·ªát Nam. H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn d·ª±a tr√™n c√°c ƒëi·ªÅu lu·∫≠t sau:

            > L·ªãch s·ª≠ trao ƒë·ªïi:
            > {histories}

            *C√¢u h·ªèi:* "{question}"

            *ƒêi·ªÅu lu·∫≠t tham kh·∫£o:*
            - B·ªô lu·∫≠t D√¢n s·ª±: {results_ds}
            - B·ªô lu·∫≠t H√¨nh s·ª±: {results_hs}

            _Tr·∫£ l·ªùi ng·∫Øn g·ªçn, tom tat theo ƒëi·ªÅu lu·∫≠t c√≥ li√™n quan, luot bo cac dieu luat khong can thiet di. chi can 2,3,4 dieu la duoc, kh√¥ng th√™m suy ƒëo√°n._
            """


def build_pro_prompt(histories: str,
                     question: str,
                     results_ds: str,
                     results_hs: str) -> str:
    """
    Build a detailed prompt for 'pro' plan: detailed analysis and citations.
    """
    return f"""
            G√ìI PRO: Tr·∫£ l·ªùi chi ti·∫øt, ph√¢n t√≠ch v√† tr√≠ch d·∫´n 1/2 c√°c ƒëi·ªÅu lu·∫≠t quan trong, tr√¨nh b√†y vai tr∆∞·ªùng h·ª£p li√™n quan.

            B·∫°n l√† lu·∫≠t s∆∞ chuy√™n v·ªÅ B·ªô lu·∫≠t D√¢n s·ª± v√† B·ªô lu·∫≠t H√¨nh s·ª± Vi·ªát Nam. H√£y ph√¢n t√≠ch v√† tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n ƒëi·ªÅu lu·∫≠t sau:

            > L·ªãch s·ª≠ trao ƒë·ªïi:
            > {histories}

            **C√¢u h·ªèi:** "{question}"

            **ƒêi·ªÅu lu·∫≠t tham kh·∫£o:**
            - B·ªô lu·∫≠t D√¢n s·ª±: {results_ds}
            - B·ªô lu·∫≠t H√¨nh s·ª±: {results_hs}

            **Y√™u c·∫ßu:**
            1. Tr√≠ch d·∫´n r√µ s·ªë v√† n·ªôi dung ƒëi·ªÅu lu·∫≠t.
            2. Ph√¢n t√≠ch chi ti·∫øt, chi phan tich dieu luat so voi cau hoi, khong neu vi du.
            3. K·∫øt lu·∫≠n r√µ r√†ng.
            4. Tr√°nh suy ƒëo√°n ngo√†i d·ªØ li·ªáu**, ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n th√¥ng tin ƒë√£ truy v·∫•n ƒë∆∞·ª£c.  
            _Tr·∫£ l·ªùi ch·ªâ d·ª±a tr√™n d·ªØ li·ªáu truy v·∫•n, kh√¥ng suy ƒëo√°n ngo√†i._
            """


def build_premium_prompt(histories: str,
                         question: str,
                         results_ds: str,
                         results_hs: str) -> str:
    """
    Build an in-depth prompt for 'premium' plan: comprehensive prompt using original template.
    """
    return f"""
            plan type = free, pro, premium
            user_plan_type = premium
            khong in plan type ra
            G√ìI FREE: Tr·∫£ l·ªùi ng·∫Øn g·ªçn, khong qua nhieu thong tin, gi·ªõi h·∫°n ƒë·ªô d√†i.
            G√ìI PRO: Tr·∫£ l·ªùi chi ti·∫øt, ph√¢n t√≠ch v√† tr√≠ch d·∫´n c√°c ƒëi·ªÅu lu·∫≠t ƒë·∫ßy ƒë·ªß, tr√¨nh b√†y c√°c tr∆∞·ªùng h·ª£p li√™n quan.
            G√ìI PREMIUM: Tr·∫£ l·ªùi chuy√™n s√¢u, ph√¢n t√≠ch k·ªπ l∆∞·ª°ng, t·ªïng h·ª£p nhi·ªÅu ƒëi·ªÅu lu·∫≠t, tr√¨nh b√†y c√°c tr∆∞·ªùng h·ª£p li√™n , g·ª£i √Ω h∆∞·ªõng gi·∫£i quy·∫øt cu the va ph√π h·ª£p nh·∫•t

            B·∫°n l√† m·ªôt lu·∫≠t s∆∞ chuy√™n v·ªÅ B·ªô lu·∫≠t D√¢n s·ª± vaÃÄ b√¥Ã£ lu√¢Ã£t hiÃÄnh s∆∞Ã£ Vi·ªát Nam. H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng d·ª±a tr√™n c√°c ƒëi·ªÅu lu·∫≠t li√™n quan ƒë∆∞·ª£c truy v·∫•n t·ª´ Neo4j.
            
            L·ªãch s·ª≠ c√¢u h·ªèi: {histories}
            ---

            **D·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ truy v·∫•n ƒë·ªì th·ªã (Graph Query)**  
            - **C√¢u h·ªèi c·ªßa kh√°ch h√†ng:** "{question}"  
            - **Danh s√°ch ƒëi·ªÅu lu·∫≠t truy v·∫•n ƒë∆∞·ª£c:**  
            ** T∆∞ÃÄ b√¥Ã£ lu√¢Ã£t d√¢n s∆∞Ã£ : {results_ds}
            ** T∆∞ÃÄ b√¥Ã£ lu√¢Ã£t hiÃÄnh s∆∞Ã£ : {results_hs}
            üìå Y√™u c·∫ßu tr·∫£ l·ªùi:* 
            1. D√πng vƒÉn phong c·ªßa m·ªôt lu·∫≠t s∆∞ chuy√™n nghi·ªáp**, gi·∫£i th√≠ch r√µ r√†ng, d·ªÖ hi·ªÉu.  
            2. Tr√≠ch d·∫´n c√°c ƒëi·ªÅu lu·∫≠t ph√π h·ª£p** t·ª´ d·ªØ li·ªáu ƒë√£ truy v·∫•n.  
            3. N·∫øu c√≥ nhi·ªÅu ƒëi·ªÅu lu·∫≠t li√™n quan**, h√£y t·ªïng h·ª£p v√† ph√¢n t√≠ch ro rang, n√™u b·∫≠t √Ω ch√≠nh.  
            4. Tr√°nh suy ƒëo√°n ngo√†i d·ªØ li·ªáu**, ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n th√¥ng tin ƒë√£ truy v·∫•n ƒë∆∞·ª£c.  
            5. K·∫øt lu·∫≠n r√µ r√†ng**, c√≥ th·ªÉ g·ª£i √Ω h∆∞·ªõng gi·∫£i quy·∫øt n·∫øu ph√π h·ª£p.  
            6. T∆∞ÃÄ nh∆∞ÃÉng ƒëi√™ÃÄu lu√¢Ã£t ƒëaÃÉ truy v√¢ÃÅn ƒë∆∞owc li√™n quan ƒë√™ÃÅn c√¢u hoÃâi, haÃÉy ƒë∆∞a ra c√¢u traÃâ l∆°ÃÄi cho ng∆∞∆°ÃÄi hoÃâi, n√™u v√≠ d·ª• ho·∫∑c c√°c tr∆∞·ªùng h·ª£p phu hop voi cau hoi nguoi dung.
            7. Trinh baÃÄy roÃÉ raÃÄng, d√™ÃÉ hi√™Ãâu, kh√¥ng d√πng t·ª´ ng·ªØ ph√°p l√Ω ph·ª©c t·∫°p.
            8. ƒêiÃÅnh k√®m caÃÅc ƒëi√™ÃÄu lu√¢Ã£t li√™n quan ƒë√™Ãâ ng∆∞∆°ÃÄi hoÃâi tham khaÃâo n√™ÃÅu c√¢ÃÄn thi√™ÃÅt.d∆∞Ã£a tr√™n nh∆∞ÃÉng ƒëi√™ÃÄu lu√¢Ã£t naÃÄo
            9. Hay ƒë∆∞a ra √Ω ki·∫øn c√° nh√¢n hay l·ªùi khuy√™n ph√°p l√Ω ƒë√£ truy v·∫•n.
            10. Kh√¥ng ƒë∆∞a ra √Ω ki·∫øn c√° nh√¢n hay l·ªùi khuy√™n ph√°p l√Ω ngo√†i d·ªØ li·ªáu ƒë√£ truy v·∫•n.
            11. o moi dieu luat neu ra giai thich ro rang tuong ung voi truong hop dang hoi
            üìå **V√≠ d·ª• ƒë·∫ßu ra mong mu·ªën:**  
            ---
            """


def generate_answer(
    question: str,
    histories: str = "",
    results_ds: str = "",
    results_hs: str = "",
    plan_type: str = "free"
) -> str:
    """
    Generates an answer using the Gemini LLM, selecting prompt style by plan_type.

    If no legal results, falls back to a general assistant prompt.
    """
    # No law data: use general assistant style
    if not results_ds.strip() and not results_hs.strip():
        general_prompt = f"""
                        L·ªãch s·ª≠ c√¢u h·ªèi: {histories}
                        ---
                        C√¢u h·ªèi: "{question}"
                        H√£y tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán, ng·∫Øn g·ªçn v√† h·ªØu √≠ch nh∆∞ m·ªôt tr·ª£ l√Ω AI th√¥ng minh.
                        N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn ƒë·ªùi s·ªëng, ki·∫øn th·ª©c chung, h√£y gi·∫£i th√≠ch d·ªÖ hi·ªÉu.
                        Tr√°nh d√πng t·ª´ ng·ªØ ph√°p l√Ω, kh√¥ng gi·∫£ ƒë·ªãnh d·ªØ li·ªáu ph√°p lu·∫≠t.
                        Tr√¨nh b√†y ƒë·∫πp v·ªõi Markdown (d√πng **in ƒë·∫≠m**, _in nghi√™ng_, üìå emoji n·∫øu c·∫ßn). 
                        """
        return LLM_gemini(general_prompt)

    # Choose prompt based on plan_type
    plan = plan_type.lower()
    if plan == 'free':
        prompt = build_free_prompt(histories, question, results_ds, results_hs)
    elif plan == 'pro':
        prompt = build_pro_prompt(histories, question, results_ds, results_hs)
    elif plan == 'premium':
        prompt = build_premium_prompt(histories, question, results_ds, results_hs)
    else:
        # default to free
        prompt = build_free_prompt(histories, question, results_ds, results_hs)

    # Call LLM
    return LLM_gemini(prompt)